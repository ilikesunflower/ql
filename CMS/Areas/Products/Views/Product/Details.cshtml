@using CMS_EF.Models.Products
@using CMS_Access.Repositories.Products
@using CMS_Lib.Util
@using CMS.Areas.Products.Const
@using CMS.Config.Consts
@model CMS.Models.ModelContainner.ModelCollection

@{
    ViewData["Title"] = "Quản lý sản phẩm";
    string namePage = "Xem chi tiết sản phẩm";
    string subName = "Quản lý sản phẩm";
    string subName1 = "Danh sách sản phẩm";
    var Product = Model.GetModel<Products>("Product");
    var Purpose = Model.GetModel<string>("Purpose");
    var Category = Model.GetModel<List<string>>("Category");
    var Images = Model.GetModel<List<ProductImage>>("Images");
    var ListPro = Model.GetModel<List<ProductPrList>>("ListPro");
    var ListS = Model.GetModel<List<ProductSimilar>>("ListS");
    var isWareHouse = Model.GetModel<bool>("isWareHouse");
}

@functions
{
    string BindCensorshipStatus(int? status)
    {
        if (ProductCensorshipConst.Pending.Status.Equals(status))
        {
            return $"<span class='status badge bg-secondary text-dark p-2'>{ProductCensorshipConst.Pending.Name}</span>";
        }
        if (ProductCensorshipConst.Approved.Status.Equals(status))
        {
            return $"<span class='status badge bg-success text-dark p-2'>{ProductCensorshipConst.Approved.Name}</span>";
        }
        if (ProductCensorshipConst.NotApproved.Status.Equals(status))
        {
            return $"<span class='status badge bg-danger text-dark p-2'>{ProductCensorshipConst.NotApproved.Name}</span>";
        }
        return "";
    }
}

<section class="content-header">
    <div class="container-fluid subname">
        <div class="row">
            <div class="col-sm-6 ">
                <ol class="breadcrumb float-sm-left">
                    <li class="breadcrumb-item">
                        <a >@subName</a>
                    </li>
                    <li class="breadcrumb-item active">
                        <a class="active" asp-area="Products" asp-action="Index">@subName1</a>
                    </li>

                </ol>
            </div>
            <div class="col-sm-6">
            </div>
        </div>
    </div><!-- /.container-fluid -->
</section>
<section class="content">
<div class="container-fluid">
<div id="root"></div>
</div>
</section>

@section Styles
{
    <link rel="stylesheet" href="~/css/Product/detail.css"/>

}

@section Scripts
{
    <link rel="stylesheet" href="~/lib/bootstrap-toggle/css/bootstrap-toggle.min.css"/>
    <script type="text/javascript" src="~/lib/bootstrap-toggle/js/bootstrap-toggle.min.js"></script>
    <script type="text/javascript" src="~/dist/js/product/test/bundle.js" asp-append-version="true"></script>

    <script type="text/javascript">
        $('.onoffswitch input[type="checkbox"]').bootstrapToggle({
            on: 'Hiện',
            off: 'Ẩn',
            size: 'mini',
            onstyle: "success",
            offstyle: "secondary"
        });
    </script>
    <script type="text/javascript">
    $(".wareHouseSync").click(function (e) {
        let url = $(this).attr('formaction');
        let urlRedirect = $(this).attr('data-url-back');
        Swal.fire({
            title: 'Bạn có chắc chắn muốn đồng bộ số lượng và giá trong kho hàng sang hệ thống @(AppConst.AppName) không?',
            type: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Đồng ý',
            confirmButtonColor: '#ed5565',
            cancelButtonText: 'Thoát'
        }).then((result) => {
            if (result.value) {
                UserInterface.prototype.showLoading();
                $.ajax({
                    type: 'POST',
                    url: url,
                    dataType: 'json',
                    data: {},
                    headers: {
                        RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        UserInterface.prototype.hideLoading();
                        if (response.msg === "successful") {
                            if (urlRedirect !== undefined) {
                                window.location.href = urlRedirect;
                            } else {
                                window.location.reload();
                            }
                        } else {
                            UserInterface.prototype.showFlashMessageError(response.content)
                        }
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        UserInterface.prototype.hideLoading();
                    }
                });
            } else if (result.dismiss === Swal.DismissReason.cancel) {
                return false;
            }
        });
    });
    
    </script>
}