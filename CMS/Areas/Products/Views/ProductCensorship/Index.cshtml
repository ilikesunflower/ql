@using CMS.Areas.Products.Const
@using CMS.Config.Consts
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model CMS.Models.ModelContainner.ModelCollection;
@using Microsoft.AspNetCore.Http.Extensions

@{
    ViewData["Title"] = "Duyệt sản phẩm";
    string namePage = "Danh sách sản phẩm";
    string subName = "Kiểm duyệt sản phẩm";
    string subName1 = Model.GetModel<string>("Title");;
    int index = (Model.GetModel<int>("Page") - 1) * 20 + 1;
    var listData = Model.GetModel<PagingList<CMS_EF.Models.Products.Products>>("ListData");
    var listStatus = Model.GetModel<List<ProductCensorshipConst>>("ListStatus");
}
@functions
{
    string BindStatus(CMS_EF.Models.Products.Products product)
    {
        var statusProperties = Model.GetModel<string>("statusProperties");
        var f1 = typeof(CMS_EF.Models.Products.Products).GetProperties().FirstOrDefault(x => x.Name == statusProperties);
        if (f1 == null) return "";
        var value = f1.GetValue(product);
        if (ProductCensorshipConst.Pending.Status.Equals(value))
        {
            return $"<span class='status badge bg-secondary text-dark p-2'>{ProductCensorshipConst.Pending.Name}</span>";
        }
        if (ProductCensorshipConst.Approved.Status.Equals(value))
        {
            return $"<span class='status badge bg-success text-dark p-2'>{ProductCensorshipConst.Approved.Name}</span>";
        }
        if (ProductCensorshipConst.NotApproved.Status.Equals(value))
        {
            return $"<span class='status badge bg-danger text-dark p-2'>{ProductCensorshipConst.NotApproved.Name}</span>";
        }
        return "";
    }
    string BindComment(CMS_EF.Models.Products.Products product)
    {
        var statusProperties = Model.GetModel<string>("statusProperties");
        var statusPropertiesV = typeof(CMS_EF.Models.Products.Products).GetProperties().FirstOrDefault(x => x.Name == statusProperties);
        if (statusPropertiesV == null) return "";
        var statusPropertiesValue = statusPropertiesV.GetValue(product);
        if (!ProductCensorshipConst.NotApproved.Status.Equals(statusPropertiesValue)) return "";
        var commentProperties = Model.GetModel<string>("commentProperties");
        var f1 = typeof(CMS_EF.Models.Products.Products).GetProperties().FirstOrDefault(x => x.Name == commentProperties);
        if (f1 == null) return "";
        var value = f1.GetValue(product);
        return value != null ? value.ToString() : "";
    }
}

<section class="content-header">
    <div class="container-fluid subname">
        <div class="row">
            <div class="col-sm-6 ">
                <ol class="breadcrumb float-sm-left">
                    <li class="breadcrumb-item">
                        <a>@subName</a>
                    </li>
                    <li class="breadcrumb-item active">@subName1</li>
                </ol>
            </div>
            <div class="col-sm-6">
            </div>
        </div>
    </div><!-- /.container-fluid -->
</section>
<section class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header ">
                        <p class="card-title namePageText">@namePage</p>
                    </div>
                    <div class="card-body">
                        <form class="row" method="get">
                            <div class="col-xs-12 col-sm-6">
                                <input autocomplete="off" name="txtSearch" class="form-control form-control-xl" placeholder="Nhập mã sản phẩm hoặc tên mặt hàng" value="@listData.RouteValue["txtSearch"]"/>
                            </div>
                            <div class="col-xs-12 col-sm-4">
                                <select class="form-control form-control-xl" name="status" asp-for="@listData.RouteValue["status"]">
                                    <option>Chọn trạng thái</option>
                                    @foreach (var item in listStatus)
                                    {
                                        <option value="@item.Status">@item.Name</option>
                                    }
                                </select>
                            </div>
                            <div class="col-xs-12 col-sm-2">
                                <button type="submit" class="btn btn-danger btn-block filter btn-xl">Tìm kiếm</button>
                            </div>
                        </form>
                        <div class="table-responsive tablePaddingTop">
                            <table class="table tab-content table-bordered table-check-all table-hover  table-bordered-index  ">
                                <thead class="table-thead">
                                <tr>
                                    <th class="text-center" style="width: 3%">STT</th>
                                    <th class="text-center" style="width: 4%">Ảnh</th>
                                    <th style="width: 10%">Mã hàng</th>
                                    <th >Tên mặt hàng</th>
                                    <th class="text-center" style="width: 8%">Trạng thái</th>
                                    <th class="text-center">Nội dung</th>
                                    <th style="width: 180px"></th>
                                </tr>
                                </thead>
                                <tbody>
                                @if (listData.Count > 0)
                                {
                                    @foreach (var item in listData)
                                    {
                                        <tr>
                                            <td class="align-middle text-center">
                                                @(index++)
                                            </td>
                                            <td class="align-middle m-b-sm text-center ">
                                                @if (!string.IsNullOrEmpty(item.Image))
                                                {
                                                    <img alt="image" src="@Html.Raw(item.Image)" width="50" height="50">
                                                }

                                            </td>
                                            <td class="align-middle">
                                                @item.Sku
                                            </td>

                                            <td class="align-middle ">
                                                @item.Name
                                            </td>
                                            <td class="text-center align-middle ">
                                                @Html.Raw(BindStatus(item))
                                            </td>
                                            <td class="align-middle">
                                                @BindComment(item)
                                            </td>
                                            <td class="text-center align-middle">
                                                <a title="Xem" class="btn bg-gradient-primary btn-xs btn-s-m mt-1 mb-1" asp-action="Details" asp-route-id="@item.Id"  asp-route-backUrl="@Context.Request.GetEncodedUrl()">
                                                    <i class="fa fa-solid fa-eye"></i><span class="d-lg-inline-block d-md-inline-block d-none">&nbsp;Xem</span>
                                                </a>
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="8" class="text-center">Không có dữ liệu</td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        </div>
                        @await Html.PartialAsync("Partial/BasicActionTable/RecordData", new {DataList = listData})
                    </div>

                </div>
            </div>
        </div>

    </div>
</section>

@section Scripts
{
    <script type="text/javascript" src="~/lib/bootstrap-tagsinput/bootstrap-tagsinput.min.js"></script>
    <script type="text/javascript" src="~/lib/bootstrap-toggle/js/bootstrap-toggle.min.js"></script>
    <script type="text/javascript">
                      $('.onoffswitch input[type="checkbox"]').bootstrapToggle({
                          on: 'Hiện',
                          off: 'Ẩn',
                          size: 'mini',
                          onstyle: "danger",
                          offstyle: "secondary"
                      });
                  </script>
    <script type="text/javascript">
       $('.wareHouseAll').click(function (e) {
           e.preventDefault();
       
           const id = [];
           let url = $(this).attr("formaction");
           $('.chkItem:checked', $('.table-check-all')).each(function () {
               id.push(parseInt($(this).val()));
           });
           if (id.length === 0) {
               Swal.fire({title: 'Bạn chưa chọn bản ghi.', type: 'warning'});
               return;
           }
           Swal.fire({
               title: 'Bạn có chắc chắn cập nhật số lượng và giá trong kho vào hệ thống @AppConst.AppName này?',
               type: 'warning',
               showCancelButton: true,
               confirmButtonText: 'Đồng ý',
               confirmButtonColor: '#ed5565',
               cancelButtonText: 'Thoát'
           }).then((result) => {
               if (result.value) {
                   UserInterface.prototype.showLoading();
                   $.ajax({
                       type: 'POST',
                       url: url,
                       dataType: 'json',
                       data: {id},
                       headers: {
                           RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                       },
                       success: function (response) {
                           UserInterface.prototype.hideLoading();
                           if (response.code == 200) {
                               window.location.reload();
                           } else {
                               UserInterface.prototype.showFlashMessageError(response.content);
                           }
                       },
                       error: function (xhr, textStatus, errorThrown) {
                            UserInterface.prototype.hideLoading();
                       }
                   });
               } else if (result.dismiss === Swal.DismissReason.cancel) {
                   return false;
               }
           });
       });

       </script>
}

@section Styles
{
    <style>
        .btn-danger:not(:disabled):not(.disabled).active, .btn-danger:not(:disabled):not(.disabled):active, .show > .btn-danger.dropdown-toggle
        {
            color: #fff;
            background-color: #9e1d23; 
            border-color: #931b20;
            border-radius: 3px;
            
        }
    </style>
    <link rel="stylesheet" href="~/lib/bootstrap-toggle/css/bootstrap-toggle.min.css"/>
}